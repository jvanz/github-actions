name: "kubewarden-policy-release"
description: "Release a Kubewarden policy"
branding:
  icon: "package"
  color: "blue"
inputs:
  annotated-wasm:
    description: "name of the annotated wasm file"
    required: false
    default: annotated-policy.wasm
  oci-target:
    description: "OCI target repository for the resulting policy artifact"
    required: true
  GITHUB_TOKEN:
    description: "GitHub token to login into ghcr.io"
    required: true
  policy-working-dir:
    description: "working directory of the policy. Useful for repos with policies in folders"
    required: false
    default: .
  policy-version:
    description: "release version of the policy without `v` prefix. E.g: 0.1.0"
    required: true
  expect-sbom:
    required: false
    description: "expect SBOM files (spdx, etc)"
    # Boolean input should be compared with string
    # until https://github.com/actions/runner/issues/2238 resolved
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Login to GitHub Container Registry
      uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ inputs.GITHUB_TOKEN }}
    - name: Publish Wasm policy artifact to OCI registry with the 'latest' tag
      shell: bash
      if: ${{ startsWith(github.ref, 'refs/heads/') }}
      run: |
        set -ex
        echo Pushing :latest policy to OCI container registry
        IMMUTABLE_REF=$(kwctl push -o json ${{ inputs.annotated-wasm }} ${{ inputs.oci-target }}:latest | jq -r .immutable_ref)

        echo Keyless signing of policy using cosign
        cosign sign --yes ${IMMUTABLE_REF}
    - name: Publish Wasm policy artifact to OCI registry with the version tag and 'latest'
      shell: bash
      if: ${{ ! startsWith(github.ref, 'refs/heads/') }}
      working-directory: ${{ inputs.policy-working-dir }}
      run: |
        set -ex
        export OCI_TAG="v${{ inputs.policy-version }}"

        echo Pushing tagged policy to OCI container registry
        IMMUTABLE_REF=$(kwctl push -o json ${{ inputs.annotated-wasm }} ${{ inputs.oci-target }}:${OCI_TAG} | jq -r .immutable_ref)

        echo Keyless signing of policy using cosign
        cosign sign --yes ${IMMUTABLE_REF}

    - name: Create release
      id: create-release
      # if we are on a monorepo, we create a GH release directly and don't reuse a draft release
      if: ${{ ! startsWith(github.ref, 'refs/heads/')  && inputs.policy-working-dir != '.' }}
      uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090 # v2.4.1
      env:
        GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        name: ${{ github.ref_name }}
        draft: false
        prerelease: ${{ contains(inputs.policy-version, '-alpha') || contains(inputs.policy-version, '-beta') || contains(inputs.policy-version, '-rc') }}
        files: |
          ${{ inputs.policy-working-dir }}/policy.wasm

    - name: Export release ID
      # if we are on a monorepo, export the release ID just created
      if: ${{ ! startsWith(github.ref, 'refs/heads/')  && inputs.policy-working-dir != '.' }}
      shell: bash
      run: |
        echo "RELEASE_ID=${{ steps.create-release.outputs.id }}" >> $GITHUB_ENV

    - name: Get release ID from the release created by release drafter
      if: ${{ ! startsWith(github.ref, 'refs/heads/')  && inputs.policy-working-dir == '.' }}
      # if we are on a single repo, we obtain the last draft release as it contains the changelog
      # and edit it by adding the artifacts. Then we mark the release as latest
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      with:
        script: |
          let releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
          });
          for (const release of releases.data) {
            if (release.draft) {
                    core.info(release)
                    core.exportVariable('RELEASE_ID', release.id)
                    return
            }
          }
          core.setFailed(`Draft release not found`)
    - name: Upload policy.wasm asset
      if: ${{ ! startsWith(github.ref, 'refs/heads/')  && inputs.policy-working-dir == '.' }}
      # if we are on a single repo, we obtain the last draft release as it contains the changelog
      # and edit it by adding the artifacts. Then we mark the release as latest
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      env:
        POLICY_WORKING_DIR: ${{ inputs.policy-working-dir }}
      with:
        script: |
          let fs = require('fs');
          let path = require('path');
          let workingDir = process.env.POLICY_WORKING_DIR || '.';

          let files = [
            `${workingDir}/policy.wasm`,
          ]
          const {RELEASE_ID} = process.env

          for (const file of files) {
            let file_data = fs.readFileSync(file);

            let response = await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: `${RELEASE_ID}`,
              name: path.basename(file),
              data: file_data,
            });
          }
    - name: Upload SPDX assets
      if: ${{ ! startsWith(github.ref, 'refs/heads/') && inputs.expect-sbom == 'true' }}
      # this step is done since some languages (like Rego) don't have library dependencies or the
      # sbom generator doesn't support them.

      # if we are on a single repo, we obtain the last draft release as it contains the changelog
      # and edit it by adding the artifacts. Then we mark the release as latest
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      env:
        POLICY_WORKING_DIR: ${{ inputs.policy-working-dir }}
      with:
        script: |
          let fs = require('fs');
          let path = require('path');
          let workingDir = process.env.POLICY_WORKING_DIR || '.';

          let files = [
            `${workingDir}/policy-sbom.spdx.json`,
            `${workingDir}/policy-sbom.spdx.cert`,
            `${workingDir}/policy-sbom.spdx.sig`,
          ]
          const {RELEASE_ID} = process.env

          for (const file of files) {
            let file_data = fs.readFileSync(file);

            let response = await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: `${RELEASE_ID}`,
              name: path.basename(file),
              data: file_data,
            });
          }
    - name: Publish release
      if: ${{ ! startsWith(github.ref, 'refs/heads/')  && inputs.policy-working-dir == '.' }}
      # if we are on a single repo, we obtain the last draft release as it contains the changelog
      # and edit it by adding the artifacts. Then we mark the release as latest
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      with:
        script: |
          const {RELEASE_ID} = process.env
          const TAG_NAME = "${{ github.ref_name }}";
          isPreRelease = ${{ contains(github.ref_name, '-alpha') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-rc') }}
          github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: `${RELEASE_ID}`,
            draft: false,
            tag_name: TAG_NAME,
            name: TAG_NAME,
            prerelease: isPreRelease,
            make_latest: !isPreRelease
          });
